import classes from './Diagnostics.module.scss';

import FormGroup from '@mui/material/FormGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import Checkbox from '@mui/material/Checkbox';
import { useEffect, useState } from 'react';
import { Button } from '@mui/material';
import { addUserDisease, getDiseases, getUserInfo } from '../../service/firebaseDB';
import { useNavigate } from 'react-router-dom';
import { auth } from '../../firebase-config';
import { onAuthStateChanged } from 'firebase/auth';
import { useSelector } from 'react-redux';


const Diagnostics = () => {
    const [symptoms, setSymptoms] = useState([]);
    const [diseases, setDiseases] = useState([]);

    const [userInfo, setUserInfo] = useState(null);

    const taken_at = useSelector(state => state.diagnosis.taken_at);

    const navigate = useNavigate();

    const [isDiagnosed, setIsDiagnosed] = useState(false);
    const [diagnosis, setDiagnosis] = useState({
        userSymptoms: symptoms,
        probabilites: []
    });

    const [user, setUser] = useState(null);

    onAuthStateChanged(auth, (currentUser) => {
        setUser(currentUser);
    })

    const mapping = {
        temperature: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
        snots: "–ù–µ–∂–∏—Ç—å",
        cough: "–ö–∞—à–µ–ª—å",
        throat_ache: "–ë—ñ–ª—å –≥–æ—Ä–ª–∞",
        gland: "–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø—ñ–¥—á–µ–ª—é—Å–Ω–∏—Ö –∑–∞–ª–æ–∑",
        suffocation: "–í—ñ–¥–¥–∏—Ö",
        rash: "–†—ñ–∑–Ω–∞  –≤–∏—Å–∏–ø–∫–∞",
        vomiting: "–¢–æ—à–Ω–æ—Ç–∞/—Ä–≤–æ—Ç–∞",
        ears_swelling: "–û–ø—É—Ö–ª—ñ—Å—Ç—å –∑–∞–≤—É—à–Ω–∏—Ö –∑–∞–ª–æ–∑",
        stomach_ache: "–ë–æ–ª—ñ –≤ –∂–∏–≤–æ—Ç—ñ",
        intestants_disorder: "–†–æ–∑–ª–∞–¥–∏ –∫–∏—à–∫—ñ–≤–Ω–∏–∫–∞",
        skin_yellowing: "–ü–æ–∂–æ–≤—Ç—ñ–Ω–Ω—è —à–∫—ñ—Ä–∏",
        headache: "–ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å",
        chills: "–û–∑–Ω–æ–±",
        photosensitivity: "–°–≤—ñ—Ç–ª–æ–±–æ—è–∑–Ω—å"
    }

    const reverse_mapping = {
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" : "temperature",
        "–ù–µ–∂–∏—Ç—å" : "snots",
        "–ö–∞—à–µ–ª—å" : "cough",
        "–ë—ñ–ª—å –≥–æ—Ä–ª–∞" : "throat_ache",
        "–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø—ñ–¥—á–µ–ª—é—Å–Ω–∏—Ö –∑–∞–ª–æ–∑" : "gland",
        "–í—ñ–¥–¥–∏—Ö" : "suffocation",
        "–†—ñ–∑–Ω–∞  –≤–∏—Å–∏–ø–∫–∞" : "rash",
        "–¢–æ—à–Ω–æ—Ç–∞/—Ä–≤–æ—Ç–∞" : "vomiting",
        "–û–ø—É—Ö–ª—ñ—Å—Ç—å –∑–∞–≤—É—à–Ω–∏—Ö –∑–∞–ª–æ–∑": "ears_swelling",
        "–ë–æ–ª—ñ –≤ –∂–∏–≤–æ—Ç—ñ" : "stomach_ache",
        "–†–æ–∑–ª–∞–¥–∏ –∫–∏—à–∫—ñ–≤–Ω–∏–∫–∞" : "intestants_disorder",
        "–ü–æ–∂–æ–≤—Ç—ñ–Ω–Ω—è —à–∫—ñ—Ä–∏" : "skin_yellowing",
        "–ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å" : "headache",
        "–û–∑–Ω–æ–±": "chills",
        "–°–≤—ñ—Ç–ª–æ–±–æ—è–∑–Ω—å" : "chills"
    }

    useEffect(() => {
        getDiseases().then(disease_list => {
            setDiseases(disease_list);
        })
    }, [])

    useEffect(() => {
        if (user)
            getUserInfo(user.email).then((userInfo) => {
                setUserInfo({ ...userInfo });
            })

    }, [user])

    useEffect(() => {
        if (userInfo) {
            if (taken_at) {
                setIsDiagnosed(true);
                setDiagnosis(userInfo.diagnostics.find(element => element.taken_at === taken_at));
                setSymptoms(userInfo.diagnostics.find(element => element.taken_at === taken_at).userSymptoms.map(e=>reverse_mapping[e]));
            }
        }
    }, [userInfo])

    const handleCheck = (event, symptom) => {
        if (!event.target.checked) {
            setSymptoms(symptoms.filter(e => e !== symptom))
        }
        else {
            setSymptoms([...symptoms, symptom]);
        }
    }

    const diagnose = () => {
        let probabilites = diseases.map(disease => {
            let probability = 0;

            symptoms.forEach(symptom => {
                probability += disease.symptoms[symptom];
            })

            return {
                name: disease.name,
                key: disease.key,
                symptom_names: disease.symptom_names,
                description: disease.description,
                probability: probability
            }
        })

        setDiagnosis({
            ...diagnosis,
            userSymptoms: symptoms.map(symptom=>mapping[symptom]),
            probabilites: probabilites.filter(probability => probability.probability > 0).sort((a, b) => b.probability - a.probability),
            taken_at: new Date(Date.now()).toString()
        })

        let tUserInfo = userInfo;

        tUserInfo.diagnostics.push({
            ...diagnosis,
            userSymptoms: symptoms.map(symptom=>mapping[symptom]),
            probabilites: probabilites.filter(probability => probability.probability > 0).sort((a, b) => b.probability - a.probability),
            taken_at: new Date(Date.now()).toString()
        });

        addUserDisease(user.email, tUserInfo);
    }

    useEffect(() => {
        console.log("üöÄ ~ file: Disagnostics.js ~ line 61 ~ Diagnostics ~ diagnosis", diagnosis)
    }, [diagnosis])



    return (<div className={classes.Diagnostics}>
        {
            !isDiagnosed &&
            <>
                <h1>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ —Å–∏–º–ø—Ç–æ–º–∏</h1>
                <FormGroup>
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("temperature")} onChange={(event) => handleCheck(event, 'temperature')} />} label="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("snots")} onChange={(event) => handleCheck(event, 'snots')} />} label="–ù–µ–∂–∏—Ç—å" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("cough")} onChange={(event) => handleCheck(event, 'cough')} />} label="–ö–∞—à–µ–ª—å" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("throat_ache")} onChange={(event) => handleCheck(event, 'throat_ache')} />} label="–ë—ñ–ª—å –≥–æ—Ä–ª–∞" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("gland")} onChange={(event) => handleCheck(event, 'gland')} />} label="–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –ø—ñ–¥—â–µ–ª–µ–ø–Ω–∏—Ö –∑–∞–ª–æ–∑" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("suffocation")} onChange={(event) => handleCheck(event, 'suffocation')} />} label="–í—ñ–¥–¥–∏—Ö" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("rash")} onChange={(event) => handleCheck(event, 'rash')} />} label="–í–∏—Å–∏–ø–∫–∞" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("vomiting")} onChange={(event) => handleCheck(event, 'vomiting')} />} label="–¢–æ—à–Ω–æ—Ç–∞/—Ä–≤–æ—Ç–∞" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("ears_swelling")} onChange={(event) => handleCheck(event, 'ears_swelling')} />} label="–û–ø—É—Ö–ª—ñ—Å—Ç—å –∑–∞–≤—É—à–Ω–∏—Ö –∑–∞–ª–æ–∑" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("stomach_ache")} onChange={(event) => handleCheck(event, 'stomach_ache')} />} label="–ë–æ–ª—ñ –≤ –∂–∏–≤–æ—Ç—ñ" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("intestants_disorder")} onChange={(event) => handleCheck(event, 'intestants_disorder')} />} label="–†–æ–∑–ª–∞–¥–∏ –∫–∏—à–∫—ñ–≤–Ω–∏–∫–∞" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("skin_yellowing")} onChange={(event) => handleCheck(event, 'skin_yellowing')} />} label="–ü–æ–∂–æ–≤—Ç—ñ–Ω–Ω—è —à–∫—ñ—Ä–∏" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("headache")} onChange={(event) => handleCheck(event, 'headache')} />} label="–ì–æ–ª–æ–≤–Ω–∏–π –±—ñ–ª—å" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("chills")} onChange={(event) => handleCheck(event, 'chills')} />} label="–û–∑–Ω–æ–±" />
                    <FormControlLabel control={<Checkbox checked={symptoms.includes("photosensitivity")} onChange={(event) => handleCheck(event, 'photosensitivity')} />} label="–°–≤—ñ—Ç–ª–æ–±–æ—è–∑–Ω—å" />
                </FormGroup>

                <Button
                    variant="contained"
                    onClick={() => {
                        diagnose();
                        setIsDiagnosed(true);
                    }}
                >
                    –©–æ –∑—ñ –º–Ω–æ—é –Ω–µ —Ç–∞–∫???
                </Button>
            </>
        }

        {
            isDiagnosed &&
            <>
                <h1>–í–∞—à—ñ —Å–∏–º–ø—Ç–æ–º–∏:</h1>
                <ul>
                    {symptoms.map(name => <li>{mapping[name]}</li>)}
                </ul>

            </>
        }

        {
            diagnosis.probabilites.filter(disease => disease.probability == 100).length === 1 && isDiagnosed &&
            <>
                <div style={{ display: 'flex', justifyContent: 'center' }}>
                    <img src="https://i.kym-cdn.com/photos/images/newsfeed/001/309/389/982.png"></img>
                </div>

                <h1>–í—ñ—Ç–∞—é! –£ –≤–∞—Å {diagnosis.probabilites[0].name.toLowerCase()}(100%)</h1>
                <h2>–°–∏–º–ø—Ç–æ–º–∏</h2>
                <ul>
                    {diagnosis?.probabilites[0]?.symptom_names?.map(name => <li>{name}</li>)}
                </ul>

                <p>{diagnosis.probabilites[0].description}</p>
            </>
        }

        {
            diagnosis.probabilites.filter(disease => disease.probability == 100).length !== 1
            && diagnosis.probabilites.filter(disease => disease.probability == 100).length !== diseases.length
            && isDiagnosed &&
            <>
                <div style={{ display: 'flex', justifyContent: 'center' }}>
                    <img src="https://i.kym-cdn.com/photos/images/newsfeed/001/309/389/982.png"></img>
                </div>

                <h1>–ú–∏ –Ω–µ –º–æ–∂–µ–º–æ –≤–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —á—ñ—Ç–∫–∏–π –¥—ñ–∞–≥–Ω–æ–∑, –∞–ª–µ –æ—Å—å —â–æ –∑ –≤–∞–º–∏ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ —Ç–∞–∫:</h1>

                {
                    diagnosis.probabilites.map(disease => {
                        return (
                            <>
                                <h1><span style={{ color: '#c98300' }}> {disease.name}</span> –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é {disease.probability} %</h1>
                                <h2>–°–∏–º–ø—Ç–æ–º–∏</h2>
                                <ul>
                                    {disease?.symptom_names?.map(name =>
                                        <li style={{ color: symptoms.findIndex(symptom => mapping[symptom] == name) >= 0 ? '#2cf71e' : 'black' }}>{name}</li>
                                    )}
                                </ul>

                                <p>{disease.description}</p>
                                <hr />
                            </>
                        )
                    })
                }

            </>
        }


        { diagnosis.probabilites.filter(disease => disease.probability == 100).length === diseases.length && isDiagnosed &&
            <>
                <div style={{ display: 'flex', justifyContent: 'center' }}>
                    <img src="https://media.istockphoto.com/photos/stairs-leading-up-to-heavenly-sky-toward-the-light-picture-id954305374?k=20&m=954305374&s=612x612&w=0&h=rV4oyHOtL547zWbGtTTwT8XCfEfWZkJorI7_ABGIiMM="></img>
                </div>

                <h1>–í—ñ—á–Ω–∞—è –ø–∞–º'—è—Ç—å</h1>

                {
                    diagnosis.probabilites.map(disease => {
                        return (
                            <>
                                <h1><span style={{ color: '#c98300' }}> {disease.name}</span> –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é {disease.probability} %</h1>
                                <h2>–°–∏–º–ø—Ç–æ–º–∏</h2>
                                <ul>
                                    {disease?.symptom_names?.map(name =>
                                        <li style={{ color: symptoms.findIndex(symptom => mapping[symptom] == name) >= 0 ? '#2cf71e' : 'black' }}>{name}</li>
                                    )}
                                </ul>

                                <p>{disease.description}</p>
                                <hr />
                            </>
                        )
                    })
                }

            </>
        }

        {
            isDiagnosed &&
            <Button variant="contained" onClick={() => navigate('/')}>–ù–∞ –≥–æ–ª–æ–≤–Ω—É</Button>
        }

    </div>);
}

export default Diagnostics;